apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'eclipse'

/**
 * http://evgeny-goldin.com/wiki/Gradle-CodeNarc-plugin
 */
ext.codenarcPriority1Violations = 0     // Work
ext.codenarcPriority2Violations = 213   // in
ext.codenarcPriority3Violations = 985   // progress ..
ext.codenarcRuleSetFiles        = [ 'codenarc.groovy' ]
ext.codenarcSources             = [ 'src/main', 'src/test' ]
apply from: 'https://raw.github.com/evgeny-goldin/gradle-plugins/master/src/main/groovy/CodeNarc.gradle'

sourceCompatibility = 1.6
targetCompatibility = 1.6

defaultTasks 'clean', 'codenarc', 'build'

test {                     
  maxHeapSize = '320m'                                 
}            

// various directory places and file names
final tmpProj    = '../template-project'
final zipName    = "${buildDir}/gaelyk-template-project-${version}.zip"

final website    = '../website'
final apiDir     = "${website}/war/api"
final websiteLib = "${website}/war/WEB-INF/lib"

sourceSets {
    main {
        groovy {
            srcDir 'src/main'
        }
        resources {
            srcDir 'src/resources'
        }
    }

    test {
        groovy {
            srcDir 'src/test'
        }
        resources {
            srcDir 'src/testResources'
        }
    }
}

repositories {
    mavenCentral()
    maven { // for Spock Groovy 2.0 Support
        url "http://oss.sonatype.org/content/repositories/snapshots/"
    }
    maven { // for Groovy 2.0.2 Snapshots
        url "http://snapshots.repository.codehaus.org/"
    }
}

dependencies {
    groovy "org.codehaus.groovy:groovy-all:$groovyVersion"
    compile "com.google.appengine:appengine-api-1.0-sdk:$appEngineVersion"
    compile "com.google.appengine:appengine-api-labs:$appEngineVersion"
    compile 'javax.servlet:servlet-api:2.5'
    testCompile 'javax.servlet.jsp:jsp-api:2.2'
    testCompile 'junit:junit:4.8.2'
    testCompile "com.google.appengine:appengine-testing:$appEngineVersion"
    testCompile "com.google.appengine:appengine-api-stubs:$appEngineVersion"
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0-SNAPSHOT', {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }

    testCompile fileTree(dir: 'testLibs', include: ['gaelyk-resources-0.1.1-SNAPSHOT.jar'])
}

jar {
    baseName 'gaelyk'
    manifest {
        attributes 'Implementation-Title': 'Gaelyk', 'Implementation-Version': version
    }
    metaInf { from 'src/main/META-INF' }
}

groovydoc {
    def title = "Gaelyk ${version}"
    destinationDir file(apiDir)
    windowTitle title
    docTitle title
    link 'http://java.sun.com/javaee/5/docs/api/', 'javax.servlet.'
    link 'http://java.sun.com/j2se/1.5.0/docs/api', 'java.,org.xml.,org.xml.'
    link 'http://code.google.com/appengine/docs/java/javadoc/', 'com.google.appengine.'
    link 'http://groovy.codehaus.org/gapi/', 'org.codehaus.groovy.,groovy.'
}

task template {
    description = 'Packaging the template project'

    doFirst {
        println 'Creating the template project ZIP file'
        ant.zip basedir: tmpProj, destfile: zipName, excludes: '__MACOSX,*.iml,.DS_Store,bin/**,.gradle/**,build/**,war/WEB-INF/appengine-generated/**'
    }
}

task dist(dependsOn: [jar, groovydoc, template]) {
    description = 'Updating the Gaelyk JAR of the website'

    doFirst {
        ant.copy file: jar.archivePath, todir: websiteLib
    }
}

// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn:classes) {
     baseName 'gaelyk'
     classifier 'sources'
     from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:groovydoc) {
     baseName 'gaelyk'
     classifier 'javadoc'
     from apiDir
}

// add javadoc/source jar tasks as artifacts
artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

tasks.withType(Upload) { // map the groovy configuration to compile in the pom
    repositories.withType(MavenResolver) {
        pom.scopeMappings.addMapping(1, configurations.groovy, 'compile')
    }
}

if(hasProperty('sonatypeUsername') && hasProperty('sonatypePassword')){
    apply plugin: 'signing'
    signing {
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { deployment -> signPom(deployment) }

                def auth = {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/', auth)
                snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots', auth)


                pom.project {
                    name 'Gaelyk'
                    packaging 'jar'
                    description 'Gaelyk is a lightweight toolkit for developing applications in Groovy for the Google App Engine environment.'
                    url 'http://www.gaelyk.org'

                    scm {
                        url 'scm:git://github.com/glaforge/gaelyk.git'
                        connection 'scm:git://github.com/glaforge/gaelyk.git'
                        developerConnection 'scm:git://github.com/glaforge/gaelyk.git'
                    }

                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'glaforge'
                            name 'Guillaume Laforge'
                        }
                        developer {
                            id 'vladimirorany'
                            name 'Vladimir Orany'
                        }
                        developer {
                            id 'bmuschko'
                            name 'Benjamin Muschko'
                        }
                        developer {
                            id 'codeconsole'
                            name 'Scott Murphy'
                        }
                        developer {
                            id 'alkemist'
                            name 'Luke Daley'
                        }
                        developer {
                            id 'lguzzon'
                            name 'Luca Guzzon'
                        }
                        developer {
                            id 'fabito'
                            name 'FÃ¡bio Franco Uechi'
                        }
                    }
                }

                //mess with the generated pom to set the 'packaging' tag
                pom.withXml { XmlProvider xmlProvider ->
                    def xml = xmlProvider.asString()
                    def pomXml = new XmlParser().parse(xml.toString())

                    pomXml.version[0] + { packaging('jar') }

                    def newXml = new StringWriter()
                    def printer = new XmlNodePrinter(new PrintWriter(newXml))
                    printer.preserveWhitespace = true
                    printer.print(pomXml)
                    xml.setLength(0)
                    xml.append(newXml.toString())
                }
            }
        }
    }
}

